
spi-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035ac  080035ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b4  080035b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080035bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000010  080035cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080035cc  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4f0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019b9  00000000  00000000  0002b530  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  0002cef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000190cd  00000000  00000000  0002e420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000875c  00000000  00000000  000474ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e5ab  00000000  00000000  0004fc49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca8  00000000  00000000  000ee270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800354c 	.word	0x0800354c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	0800354c 	.word	0x0800354c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_SPI_RxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
	status = STATUS_TXCPLT;
}
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	status = STATUS_RXCPLT;
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <HAL_SPI_RxCpltCallback+0x1c>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	701a      	strb	r2, [r3, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000035 	.word	0x20000035

080004ec <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	status = STATUS_TXRXCPLT;
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80004f6:	2203      	movs	r2, #3
 80004f8:	701a      	strb	r2, [r3, #0]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000035 	.word	0x20000035

0800050c <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	status = STATUS_ERROR;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_SPI_ErrorCallback+0x1c>)
 8000516:	2204      	movs	r2, #4
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000035 	.word	0x20000035

0800052c <handle_spi_comm>:
{
	status = STATUS_ABORT;
}

static int handle_spi_comm(enum enum_status *status)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	if(SPI_STATE_READ_HDR == state_data.read_hdr) {
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <handle_spi_comm+0xa4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d12a      	bne.n	8000592 <handle_spi_comm+0x66>
		if(state_data.address > memory_sz) return -1;
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <handle_spi_comm+0xa4>)
 800053e:	785b      	ldrb	r3, [r3, #1]
 8000540:	461a      	mov	r2, r3
 8000542:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <handle_spi_comm+0xa8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	429a      	cmp	r2, r3
 8000548:	dd02      	ble.n	8000550 <handle_spi_comm+0x24>
 800054a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800054e:	e03a      	b.n	80005c6 <handle_spi_comm+0x9a>
		struct spi_header *spi_header = (struct spi_header *)&rx_buf[0];
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <handle_spi_comm+0xac>)
 8000552:	60fb      	str	r3, [r7, #12]
		state_data.address = spi_header->address;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <handle_spi_comm+0xa4>)
 8000562:	705a      	strb	r2, [r3, #1]
		state_data.rw = spi_header->rw;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <handle_spi_comm+0xa4>)
 8000572:	709a      	strb	r2, [r3, #2]
		state_data.read_hdr = SPI_STATE_RW_MEMORY;
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <handle_spi_comm+0xa4>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]

		if(SPI_READ == state_data.rw) {
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <handle_spi_comm+0xa4>)
 800057c:	789b      	ldrb	r3, [r3, #2]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d116      	bne.n	80005b0 <handle_spi_comm+0x84>
			tx_buf[0] = memory[state_data.address];
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <handle_spi_comm+0xa4>)
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	461a      	mov	r2, r3
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <handle_spi_comm+0xb0>)
 800058a:	5c9a      	ldrb	r2, [r3, r2]
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <handle_spi_comm+0xb4>)
 800058e:	701a      	strb	r2, [r3, #0]
		}

		goto end;
 8000590:	e00e      	b.n	80005b0 <handle_spi_comm+0x84>
	}

	if(SPI_WRITE == state_data.rw) {
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <handle_spi_comm+0xa4>)
 8000594:	789b      	ldrb	r3, [r3, #2]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d106      	bne.n	80005a8 <handle_spi_comm+0x7c>
		memory[state_data.address] = rx_buf[0];
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <handle_spi_comm+0xa4>)
 800059c:	785b      	ldrb	r3, [r3, #1]
 800059e:	461a      	mov	r2, r3
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <handle_spi_comm+0xac>)
 80005a2:	7819      	ldrb	r1, [r3, #0]
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <handle_spi_comm+0xb0>)
 80005a6:	5499      	strb	r1, [r3, r2]
	}

	state_data.read_hdr = SPI_STATE_READ_HDR;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <handle_spi_comm+0xa4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e000      	b.n	80005b2 <handle_spi_comm+0x86>
		goto end;
 80005b0:	bf00      	nop

end:
	*status = STATUS_UNSET;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive_IT(&hspi1, &tx_buf[0], &rx_buf[0], sizeof(rx_buf[0]));
 80005b8:	2301      	movs	r3, #1
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <handle_spi_comm+0xac>)
 80005bc:	4908      	ldr	r1, [pc, #32]	; (80005e0 <handle_spi_comm+0xb4>)
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <handle_spi_comm+0xb8>)
 80005c0:	f001 ff44 	bl	800244c <HAL_SPI_TransmitReceive_IT>

	return 0;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000034 	.word	0x20000034
 80005dc:	20000038 	.word	0x20000038
 80005e0:	20000030 	.word	0x20000030
 80005e4:	2000004c 	.word	0x2000004c

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fac1 	bl	8000b72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f844 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f912 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 f8e0 	bl	80007bc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005fc:	f000 f8a6 	bl	800074c <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  state_data.read_hdr = SPI_STATE_READ_HDR;
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <main+0x80>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive_IT(&hspi1, &tx_buf[0], &rx_buf[0], sizeof(rx_buf[0]));
 8000606:	2301      	movs	r3, #1
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <main+0x84>)
 800060a:	4919      	ldr	r1, [pc, #100]	; (8000670 <main+0x88>)
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <main+0x8c>)
 800060e:	f001 ff1d 	bl	800244c <HAL_SPI_TransmitReceive_IT>
  while (1)
  {
	  switch(status) {
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <main+0x90>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b05      	cmp	r3, #5
 8000618:	d8fb      	bhi.n	8000612 <main+0x2a>
 800061a:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <main+0x38>)
 800061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000620:	08000639 	.word	0x08000639
 8000624:	0800065d 	.word	0x0800065d
 8000628:	0800065d 	.word	0x0800065d
 800062c:	08000655 	.word	0x08000655
 8000630:	0800065d 	.word	0x0800065d
 8000634:	0800065d 	.word	0x0800065d
	  case STATUS_UNSET:
		  if(!hspi1.ErrorCode) break;
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <main+0x8c>)
 800063a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063c:	2b00      	cmp	r3, #0
 800063e:	d011      	beq.n	8000664 <main+0x7c>
		  hspi1.ErrorCode = 0;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <main+0x8c>)
 8000642:	2200      	movs	r2, #0
 8000644:	661a      	str	r2, [r3, #96]	; 0x60
		  HAL_SPI_TransmitReceive_IT(&hspi1, &tx_buf[0], &rx_buf[0], sizeof(rx_buf[0]));
 8000646:	2301      	movs	r3, #1
 8000648:	4a08      	ldr	r2, [pc, #32]	; (800066c <main+0x84>)
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <main+0x88>)
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0x8c>)
 800064e:	f001 fefd 	bl	800244c <HAL_SPI_TransmitReceive_IT>
		  break;
 8000652:	e008      	b.n	8000666 <main+0x7e>
	  case STATUS_TXRXCPLT:
		  handle_spi_comm(&status);
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <main+0x90>)
 8000656:	f7ff ff69 	bl	800052c <handle_spi_comm>
		  break;
 800065a:	e004      	b.n	8000666 <main+0x7e>
	  case STATUS_RXCPLT:
	  case STATUS_TXCPLT:
	  case STATUS_ERROR:
	  case STATUS_ABORT:
		  status = STATUS_UNSET;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <main+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
		  break;
 8000662:	e000      	b.n	8000666 <main+0x7e>
		  if(!hspi1.ErrorCode) break;
 8000664:	bf00      	nop
	  switch(status) {
 8000666:	e7d4      	b.n	8000612 <main+0x2a>
 8000668:	2000002c 	.word	0x2000002c
 800066c:	20000034 	.word	0x20000034
 8000670:	20000030 	.word	0x20000030
 8000674:	2000004c 	.word	0x2000004c
 8000678:	20000035 	.word	0x20000035

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0a4      	sub	sp, #144	; 0x90
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000686:	2244      	movs	r2, #68	; 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 ff56 	bl	800353c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2234      	movs	r2, #52	; 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 ff48 	bl	800353c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b0:	f000 fde2 	bl	8001278 <HAL_PWREx_ControlVoltageScaling>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x42>
  {
    Error_Handler();
 80006ba:	f000 f8f9 	bl	80008b0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2340      	movs	r3, #64	; 0x40
 80006ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006da:	230a      	movs	r3, #10
 80006dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fe17 	bl	8001324 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006fc:	f000 f8d8 	bl	80008b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2303      	movs	r3, #3
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000714:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000718:	2104      	movs	r1, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fa68 	bl	8001bf0 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000726:	f000 f8c3 	bl	80008b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800072a:	2302      	movs	r3, #2
 800072c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fc5f 	bl	8001ff8 <HAL_RCCEx_PeriphCLKConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000740:	f000 f8b6 	bl	80008b0 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3790      	adds	r7, #144	; 0x90
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000752:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <MX_SPI1_Init+0x6c>)
 8000754:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_SPI1_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000764:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000768:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI1_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_SPI1_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI1_Init+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000790:	2207      	movs	r2, #7
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI1_Init+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x68>)
 800079c:	2200      	movs	r2, #0
 800079e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI1_Init+0x68>)
 80007a2:	f001 fdaf 	bl	8002304 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80007ac:	f000 f880 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000004c 	.word	0x2000004c
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART2_UART_Init+0x58>)
 8000800:	f002 fa92 	bl	8002d28 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f851 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000b0 	.word	0x200000b0
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_GPIO_Init+0x8c>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_GPIO_Init+0x8c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	480b      	ldr	r0, [pc, #44]	; (80008ac <MX_GPIO_Init+0x90>)
 8000880:	f000 fcb0 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000884:	2308      	movs	r3, #8
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_GPIO_Init+0x90>)
 800089c:	f000 fb30 	bl	8000f00 <HAL_GPIO_Init>

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <Error_Handler+0x6>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x44>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x44>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6593      	str	r3, [r2, #88]	; 0x58
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x44>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <HAL_SPI_MspInit+0x8c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d130      	bne.n	8000984 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_SPI_MspInit+0x90>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	4a1a      	ldr	r2, [pc, #104]	; (8000990 <HAL_SPI_MspInit+0x90>)
 8000928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800092c:	6613      	str	r3, [r2, #96]	; 0x60
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_SPI_MspInit+0x90>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_SPI_MspInit+0x90>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_SPI_MspInit+0x90>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_SPI_MspInit+0x90>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000952:	23d2      	movs	r3, #210	; 0xd2
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000962:	2305      	movs	r3, #5
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f000 fac6 	bl	8000f00 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2023      	movs	r0, #35	; 0x23
 800097a:	f000 fa4a 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800097e:	2023      	movs	r0, #35	; 0x23
 8000980:	f000 fa63 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013000 	.word	0x40013000
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <HAL_UART_MspInit+0xa0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d13a      	bne.n	8000a2c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <HAL_UART_MspInit+0xa4>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <HAL_UART_MspInit+0xa4>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <HAL_UART_MspInit+0xa4>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_UART_MspInit+0xa4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_UART_MspInit+0xa4>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0xa4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009e6:	2304      	movs	r3, #4
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f6:	2307      	movs	r3, #7
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 fa7c 	bl	8000f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f000 fa6a 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8c8 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a94:	2008      	movs	r0, #8
 8000a96:	f000 fbbd 	bl	8001214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <SPI1_IRQHandler+0x10>)
 8000aa6:	f001 fd81 	bl	80025ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000004c 	.word	0x2000004c

08000ab4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <SystemInit+0x64>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <SystemInit+0x64>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <SystemInit+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <SystemInit+0x68>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <SystemInit+0x68>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <SystemInit+0x68>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <SystemInit+0x68>)
 8000ae0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ae4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ae8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <SystemInit+0x68>)
 8000aec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <SystemInit+0x68>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <SystemInit+0x68>)
 8000af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <SystemInit+0x68>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SystemInit+0x64>)
 8000b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00
 8000b1c:	40021000 	.word	0x40021000

08000b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b24:	f7ff ffc6 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b2a:	e003      	b.n	8000b34 <LoopCopyDataInit>

08000b2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b32:	3104      	adds	r1, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b3c:	d3f6      	bcc.n	8000b2c <CopyDataInit>
	ldr	r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b40:	e002      	b.n	8000b48 <LoopFillZerobss>

08000b42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b44:	f842 3b04 	str.w	r3, [r2], #4

08000b48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <LoopForever+0x16>)
	cmp	r2, r3
 8000b4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b4c:	d3f9      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f002 fcd1 	bl	80034f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b52:	f7ff fd49 	bl	80005e8 <main>

08000b56 <LoopForever>:

LoopForever:
    b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b58:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000b5c:	080035bc 	.word	0x080035bc
	ldr	r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b64:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b68:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b6c:	20000138 	.word	0x20000138

08000b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_2_IRQHandler>

08000b72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f93d 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f80e 	bl	8000ba4 <HAL_InitTick>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	e001      	b.n	8000b98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b94:	f7ff fe90 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d023      	beq.n	8000c00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_InitTick+0x70>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_InitTick+0x6c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f949 	bl	8000e66 <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10f      	bne.n	8000bfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d809      	bhi.n	8000bf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	f000 f913 	bl	8000e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_InitTick+0x74>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e007      	b.n	8000c04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e004      	b.n	8000c04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	e001      	b.n	8000c04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	20000004 	.word	0x20000004
 8000c18:	20000008 	.word	0x20000008

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	20000134 	.word	0x20000134

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000134 	.word	0x20000134

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff29 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff3e 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff31 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffa2 	bl	8000db8 <SysTick_Config>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b084      	sub	sp, #16
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d005      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2204      	movs	r2, #4
 8000e9a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e029      	b.n	8000ef6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 020e 	bic.w	r2, r2, #14
 8000eb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0201 	bic.w	r2, r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f003 021c 	and.w	r2, r3, #28
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	4798      	blx	r3
    }
  }
  return status;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0e:	e14e      	b.n	80011ae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8140 	beq.w	80011a8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d00b      	beq.n	8000f48 <HAL_GPIO_Init+0x48>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d007      	beq.n	8000f48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3c:	2b11      	cmp	r3, #17
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b12      	cmp	r3, #18
 8000f46:	d130      	bne.n	8000faa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	f003 0201 	and.w	r2, r3, #1
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0xea>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d123      	bne.n	8001032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	6939      	ldr	r1, [r7, #16]
 800102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0203 	and.w	r2, r3, #3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 809a 	beq.w	80011a8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001074:	4b55      	ldr	r3, [pc, #340]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 8001076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001078:	4a54      	ldr	r2, [pc, #336]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6613      	str	r3, [r2, #96]	; 0x60
 8001080:	4b52      	ldr	r3, [pc, #328]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 8001082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800108c:	4a50      	ldr	r2, [pc, #320]	; (80011d0 <HAL_GPIO_Init+0x2d0>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010b6:	d013      	beq.n	80010e0 <HAL_GPIO_Init+0x1e0>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <HAL_GPIO_Init+0x2d4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00d      	beq.n	80010dc <HAL_GPIO_Init+0x1dc>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <HAL_GPIO_Init+0x2d8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x1d8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a44      	ldr	r2, [pc, #272]	; (80011dc <HAL_GPIO_Init+0x2dc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_GPIO_Init+0x1d4>
 80010d0:	2303      	movs	r3, #3
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x1e2>
 80010d4:	2307      	movs	r3, #7
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x1e2>
 80010d8:	2302      	movs	r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x1e2>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x1e2>
 80010e0:	2300      	movs	r3, #0
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f2:	4937      	ldr	r1, [pc, #220]	; (80011d0 <HAL_GPIO_Init+0x2d0>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001100:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_GPIO_Init+0x2e0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001124:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <HAL_GPIO_Init+0x2e0>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_GPIO_Init+0x2e0>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800114e:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <HAL_GPIO_Init+0x2e0>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <HAL_GPIO_Init+0x2e0>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001178:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_GPIO_Init+0x2e0>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_GPIO_Init+0x2e0>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_GPIO_Init+0x2e0>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f47f aea9 	bne.w	8000f10 <HAL_GPIO_Init+0x10>
  }
}
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	40010400 	.word	0x40010400

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001200:	e002      	b.n	8001208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f806 	bl	8001244 <HAL_GPIO_EXTI_Callback>
  }
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_PWREx_GetVoltageRange+0x18>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40007000 	.word	0x40007000

08001278 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001286:	d130      	bne.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001294:	d038      	beq.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2232      	movs	r2, #50	; 0x32
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0c9b      	lsrs	r3, r3, #18
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012bc:	e002      	b.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d0:	d102      	bne.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f2      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e4:	d110      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e00f      	b.n	800130a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f6:	d007      	beq.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001300:	4a05      	ldr	r2, [pc, #20]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001306:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40007000 	.word	0x40007000
 800131c:	20000004 	.word	0x20000004
 8001320:	431bde83 	.word	0x431bde83

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	f000 bc56 	b.w	8001be4 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001338:	4ba1      	ldr	r3, [pc, #644]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001342:	4b9f      	ldr	r3, [pc, #636]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80e6 	beq.w	8001526 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <HAL_RCC_OscConfig+0x4c>
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	2b0c      	cmp	r3, #12
 8001364:	f040 808d 	bne.w	8001482 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b01      	cmp	r3, #1
 800136c:	f040 8089 	bne.w	8001482 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001370:	4b93      	ldr	r3, [pc, #588]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_RCC_OscConfig+0x66>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	f000 bc2d 	b.w	8001be4 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138e:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <HAL_RCC_OscConfig+0x80>
 800139a:	4b89      	ldr	r3, [pc, #548]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013a2:	e005      	b.n	80013b0 <HAL_RCC_OscConfig+0x8c>
 80013a4:	4b86      	ldr	r3, [pc, #536]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80013a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d224      	bcs.n	80013fe <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fdbd 	bl	8001f38 <RCC_SetFlashLatencyFromMSIRange>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f000 bc0d 	b.w	8001be4 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ca:	4b7d      	ldr	r3, [pc, #500]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7c      	ldr	r2, [pc, #496]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b7a      	ldr	r3, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	4977      	ldr	r1, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e8:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	4972      	ldr	r1, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
 80013fc:	e025      	b.n	800144a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fe:	4b70      	ldr	r3, [pc, #448]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6f      	ldr	r2, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	496a      	ldr	r1, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	4965      	ldr	r1, [pc, #404]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fd7c 	bl	8001f38 <RCC_SetFlashLatencyFromMSIRange>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e3cc      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800144a:	f000 fcb3 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 800144e:	4601      	mov	r1, r0
 8001450:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <HAL_RCC_OscConfig+0x2a0>)
 800145c:	5cd3      	ldrb	r3, [r2, r3]
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	fa21 f303 	lsr.w	r3, r1, r3
 8001466:	4a58      	ldr	r2, [pc, #352]	; (80015c8 <HAL_RCC_OscConfig+0x2a4>)
 8001468:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800146a:	4b58      	ldr	r3, [pc, #352]	; (80015cc <HAL_RCC_OscConfig+0x2a8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fb98 	bl	8000ba4 <HAL_InitTick>
 8001474:	4603      	mov	r3, r0
 8001476:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d052      	beq.n	8001524 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	e3b0      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d032      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800148a:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a4c      	ldr	r2, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001496:	f7ff fbd5 	bl	8000c44 <HAL_GetTick>
 800149a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800149e:	f7ff fbd1 	bl	8000c44 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e399      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b0:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014bc:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a3f      	ldr	r2, [pc, #252]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	493a      	ldr	r1, [pc, #232]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	4935      	ldr	r1, [pc, #212]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
 80014ee:	e01a      	b.n	8001526 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f0:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fba2 	bl	8000c44 <HAL_GetTick>
 8001500:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001504:	f7ff fb9e 	bl	8000c44 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e366      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1e0>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d073      	beq.n	800161a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	2b08      	cmp	r3, #8
 8001536:	d005      	beq.n	8001544 <HAL_RCC_OscConfig+0x220>
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d10e      	bne.n	800155c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d10b      	bne.n	800155c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d063      	beq.n	8001618 <HAL_RCC_OscConfig+0x2f4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d15f      	bne.n	8001618 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e343      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d106      	bne.n	8001574 <HAL_RCC_OscConfig+0x250>
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e01d      	b.n	80015b0 <HAL_RCC_OscConfig+0x28c>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x274>
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0x28c>
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 800159e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01b      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb44 	bl	8000c44 <HAL_GetTick>
 80015bc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015be:	e010      	b.n	80015e2 <HAL_RCC_OscConfig+0x2be>
 80015c0:	40021000 	.word	0x40021000
 80015c4:	08003564 	.word	0x08003564
 80015c8:	20000004 	.word	0x20000004
 80015cc:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fb38 	bl	8000c44 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e300      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e2:	4ba0      	ldr	r3, [pc, #640]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x2ac>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb28 	bl	8000c44 <HAL_GetTick>
 80015f4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fb24 	bl	8000c44 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e2ec      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160a:	4b96      	ldr	r3, [pc, #600]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2d4>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d060      	beq.n	80016e8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	2b04      	cmp	r3, #4
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x314>
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d119      	bne.n	8001666 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d116      	bne.n	8001666 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001638:	4b8a      	ldr	r3, [pc, #552]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x32c>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e2c9      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	4981      	ldr	r1, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001664:	e040      	b.n	80016e8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d023      	beq.n	80016b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166e:	4b7d      	ldr	r3, [pc, #500]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7c      	ldr	r2, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff fae3 	bl	8000c44 <HAL_GetTick>
 800167e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001682:	f7ff fadf 	bl	8000c44 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e2a7      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001694:	4b73      	ldr	r3, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	496d      	ldr	r1, [pc, #436]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e018      	b.n	80016e8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b6:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a6a      	ldr	r2, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80016bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff fabf 	bl	8000c44 <HAL_GetTick>
 80016c6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff fabb 	bl	8000c44 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e283      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016dc:	4b61      	ldr	r3, [pc, #388]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d07f      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d05f      	beq.n	80017bc <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001702:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	429a      	cmp	r2, r3
 8001710:	d037      	beq.n	8001782 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e25c      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01b      	beq.n	800176c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173a:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001744:	f7ff fa7e 	bl	8000c44 <HAL_GetTick>
 8001748:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fa7a 	bl	8000c44 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b11      	cmp	r3, #17
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e242      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ef      	bne.n	800174c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800176c:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001772:	f023 0210 	bic.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	493a      	ldr	r1, [pc, #232]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 800177c:	4313      	orrs	r3, r2
 800177e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001788:	4a36      	ldr	r2, [pc, #216]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fa57 	bl	8000c44 <HAL_GetTick>
 8001796:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fa53 	bl	8000c44 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b11      	cmp	r3, #17
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e21b      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0ef      	beq.n	800179a <HAL_RCC_OscConfig+0x476>
 80017ba:	e01b      	b.n	80017f4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c2:	4a28      	ldr	r2, [pc, #160]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fa3a 	bl	8000c44 <HAL_GetTick>
 80017d0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fa36 	bl	8000c44 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b11      	cmp	r3, #17
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1fe      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 80017e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ef      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80c1 	beq.w	8001984 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10e      	bne.n	8001832 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	4a12      	ldr	r2, [pc, #72]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181e:	6593      	str	r3, [r2, #88]	; 0x58
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_RCC_OscConfig+0x540>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_RCC_OscConfig+0x544>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_RCC_OscConfig+0x544>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <HAL_RCC_OscConfig+0x544>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184a:	f7ff f9fb 	bl	8000c44 <HAL_GetTick>
 800184e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001850:	e00c      	b.n	800186c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001852:	f7ff f9f7 	bl	8000c44 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d905      	bls.n	800186c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e1bf      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4bb1      	ldr	r3, [pc, #708]	; (8001b34 <HAL_RCC_OscConfig+0x810>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0ec      	beq.n	8001852 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d02c      	beq.n	80018de <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001884:	4bac      	ldr	r3, [pc, #688]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	49a8      	ldr	r1, [pc, #672]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001898:	4313      	orrs	r3, r2
 800189a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d010      	beq.n	80018cc <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018aa:	4ba3      	ldr	r3, [pc, #652]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b0:	4aa1      	ldr	r2, [pc, #644]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018ba:	4b9f      	ldr	r3, [pc, #636]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c0:	4a9d      	ldr	r2, [pc, #628]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ca:	e018      	b.n	80018fe <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018cc:	4b9a      	ldr	r3, [pc, #616]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	4a99      	ldr	r2, [pc, #612]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018dc:	e00f      	b.n	80018fe <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018de:	4b96      	ldr	r3, [pc, #600]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e4:	4a94      	ldr	r2, [pc, #592]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018ee:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	4a90      	ldr	r2, [pc, #576]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80018f6:	f023 0304 	bic.w	r3, r3, #4
 80018fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d016      	beq.n	8001934 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f99d 	bl	8000c44 <HAL_GetTick>
 800190a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff f999 	bl	8000c44 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e15f      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001924:	4b84      	ldr	r3, [pc, #528]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ed      	beq.n	800190e <HAL_RCC_OscConfig+0x5ea>
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff f986 	bl	8000c44 <HAL_GetTick>
 8001938:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff f982 	bl	8000c44 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e148      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001952:	4b79      	ldr	r3, [pc, #484]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ed      	bne.n	800193c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001960:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	4a74      	ldr	r2, [pc, #464]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 800197e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001982:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0320 	and.w	r3, r3, #32
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001998:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 800199a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199e:	4a66      	ldr	r2, [pc, #408]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff f94c 	bl	8000c44 <HAL_GetTick>
 80019ac:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b0:	f7ff f948 	bl	8000c44 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e110      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80019c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ef      	beq.n	80019b0 <HAL_RCC_OscConfig+0x68c>
 80019d0:	e01b      	b.n	8001a0a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019d2:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80019d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d8:	4a57      	ldr	r2, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff f92f 	bl	8000c44 <HAL_GetTick>
 80019e6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ea:	f7ff f92b 	bl	8000c44 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e0f3      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019fc:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 80019fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ef      	bne.n	80019ea <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80e7 	beq.w	8001be2 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	f040 80b7 	bne.w	8001b8c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a1e:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0203 	and.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d124      	bne.n	8001a7c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d11b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d113      	bne.n	8001a7c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	3b01      	subs	r3, #1
 8001a62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d109      	bne.n	8001a7c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d061      	beq.n	8001b40 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d056      	beq.n	8001b30 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a2c      	ldr	r2, [pc, #176]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001a88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8e:	f7ff f8d9 	bl	8000c44 <HAL_GetTick>
 8001a92:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f8d5 	bl	8000c44 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e09d      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_RCC_OscConfig+0x818>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ac4:	3a01      	subs	r2, #1
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	4311      	orrs	r1, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ace:	0212      	lsls	r2, r2, #8
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ad6:	0852      	lsrs	r2, r2, #1
 8001ad8:	3a01      	subs	r2, #1
 8001ada:	0552      	lsls	r2, r2, #21
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ae2:	0852      	lsrs	r2, r2, #1
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0652      	lsls	r2, r2, #25
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	4913      	ldr	r1, [pc, #76]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b08:	f7ff f89c 	bl	8000c44 <HAL_GetTick>
 8001b0c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff f898 	bl	8000c44 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e060      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_OscConfig+0x814>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2e:	e058      	b.n	8001be2 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e057      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
 8001b34:	40007000 	.word	0x40007000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d14a      	bne.n	8001be2 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a26      	ldr	r2, [pc, #152]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b64:	f7ff f86e 	bl	8000c44 <HAL_GetTick>
 8001b68:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f86a 	bl	8000c44 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e032      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x848>
 8001b8a:	e02a      	b.n	8001be2 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d025      	beq.n	8001bde <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a15      	ldr	r2, [pc, #84]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001ba4:	f023 0303 	bic.w	r3, r3, #3
 8001ba8:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001bb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bb4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f845 	bl	8000c44 <HAL_GetTick>
 8001bba:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7ff f841 	bl	8000c44 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e009      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_OscConfig+0x8c8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x89a>
 8001bdc:	e001      	b.n	8001be2 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0c8      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4961      	ldr	r1, [pc, #388]	; (8001da0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b5f      	ldr	r3, [pc, #380]	; (8001da0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b0      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d04c      	beq.n	8001cda <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c48:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d121      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e09e      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d115      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e092      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e086      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c88:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e07e      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c98:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 0203 	bic.w	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	493f      	ldr	r1, [pc, #252]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001caa:	f7fe ffcb 	bl	8000c44 <HAL_GetTick>
 8001cae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb2:	f7fe ffc7 	bl	8000c44 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e066      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 020c 	and.w	r2, r3, #12
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d1eb      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	492c      	ldr	r1, [pc, #176]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_RCC_ClockConfig+0x1b0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d210      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 0207 	bic.w	r2, r3, #7
 8001d0e:	4924      	ldr	r1, [pc, #144]	; (8001da0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e036      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4918      	ldr	r1, [pc, #96]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4910      	ldr	r1, [pc, #64]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d66:	f000 f825 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe ff0a 	bl	8000ba4 <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d94:	7afb      	ldrb	r3, [r7, #11]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08003564 	.word	0x08003564
 8001dac:	20000004 	.word	0x20000004
 8001db0:	20000008 	.word	0x20000008

08001db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d121      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d11e      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001df4:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e005      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e10:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10d      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	e004      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d133      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d002      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0xaa>
 8001e56:	e005      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e5a:	617b      	str	r3, [r7, #20]
      break;
 8001e5c:	e005      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e60:	617b      	str	r3, [r7, #20]
      break;
 8001e62:	e002      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	617b      	str	r3, [r7, #20]
      break;
 8001e68:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	3301      	adds	r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	fb02 f203 	mul.w	r2, r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0e5b      	lsrs	r3, r3, #25
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3724      	adds	r7, #36	; 0x24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	0800357c 	.word	0x0800357c
 8001ec0:	00f42400 	.word	0x00f42400
 8001ec4:	007a1200 	.word	0x007a1200

08001ec8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ee4:	f7ff fff0 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4601      	mov	r1, r0
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08003574 	.word	0x08003574

08001f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f10:	f7ff ffda 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001f14:	4601      	mov	r1, r0
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0adb      	lsrs	r3, r3, #11
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08003574 	.word	0x08003574

08001f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f50:	f7ff f984 	bl	800125c <HAL_PWREx_GetVoltageRange>
 8001f54:	6178      	str	r0, [r7, #20]
 8001f56:	e014      	b.n	8001f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	; 0x58
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f70:	f7ff f974 	bl	800125c <HAL_PWREx_GetVoltageRange>
 8001f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f88:	d10b      	bne.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d919      	bls.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2ba0      	cmp	r3, #160	; 0xa0
 8001f94:	d902      	bls.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f96:	2302      	movs	r3, #2
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e013      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	e010      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d902      	bls.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa8:	2303      	movs	r3, #3
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e00a      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d102      	bne.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e004      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b70      	cmp	r3, #112	; 0x70
 8001fbe:	d101      	bne.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 0207 	bic.w	r2, r3, #7
 8001fcc:	4909      	ldr	r1, [pc, #36]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002000:	2300      	movs	r3, #0
 8002002:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002004:	2300      	movs	r3, #0
 8002006:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 809e 	beq.w	8002152 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b40      	ldr	r3, [pc, #256]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	4a3f      	ldr	r2, [pc, #252]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203a:	6593      	str	r3, [r2, #88]	; 0x58
 800203c:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002048:	2301      	movs	r3, #1
 800204a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800204c:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a39      	ldr	r2, [pc, #228]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002058:	f7fe fdf4 	bl	8000c44 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800205e:	e009      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002060:	f7fe fdf0 	bl	8000c44 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d902      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	74fb      	strb	r3, [r7, #19]
        break;
 8002072:	e005      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002074:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ef      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d15a      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002086:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002090:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01e      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d019      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020ce:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d016      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7fe fdb0 	bl	8000c44 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e6:	e00b      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7fe fdac 	bl	8000c44 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d902      	bls.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	74fb      	strb	r3, [r7, #19]
            break;
 80020fe:	e006      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0ec      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800210e:	7cfb      	ldrb	r3, [r7, #19]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10b      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4904      	ldr	r1, [pc, #16]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800212a:	e009      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
 8002130:	e006      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002140:	7c7b      	ldrb	r3, [r7, #17]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d105      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002146:	4b6e      	ldr	r3, [pc, #440]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	4a6d      	ldr	r2, [pc, #436]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800214c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002150:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215e:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002164:	f023 0203 	bic.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4964      	ldr	r1, [pc, #400]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002180:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 020c 	bic.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	495c      	ldr	r1, [pc, #368]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4953      	ldr	r1, [pc, #332]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021c4:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	494b      	ldr	r1, [pc, #300]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021e6:	4b46      	ldr	r3, [pc, #280]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4942      	ldr	r1, [pc, #264]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002208:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	493a      	ldr	r1, [pc, #232]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800222a:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	4931      	ldr	r1, [pc, #196]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	4929      	ldr	r1, [pc, #164]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4920      	ldr	r1, [pc, #128]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d015      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	4918      	ldr	r1, [pc, #96]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ae:	d105      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a12      	ldr	r2, [pc, #72]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d015      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	490a      	ldr	r1, [pc, #40]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e6:	d105      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e095      	b.n	8002442 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002326:	d009      	beq.n	800233c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
 800232e:	e005      	b.n	800233c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fad2 	bl	8000900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002372:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800237c:	d902      	bls.n	8002384 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e002      	b.n	800238a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002392:	d007      	beq.n	80023a4 <HAL_SPI_Init+0xa0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800239c:	d002      	beq.n	80023a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e6:	ea42 0103 	orr.w	r1, r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	f003 0204 	and.w	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002420:	ea42 0103 	orr.w	r1, r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_SPI_TransmitReceive_IT+0x20>
 8002468:	2302      	movs	r3, #2
 800246a:	e091      	b.n	8002590 <HAL_SPI_TransmitReceive_IT+0x144>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800247a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002482:	7dbb      	ldrb	r3, [r7, #22]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d00d      	beq.n	80024a4 <HAL_SPI_TransmitReceive_IT+0x58>
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800248e:	d106      	bne.n	800249e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <HAL_SPI_TransmitReceive_IT+0x52>
 8002498:	7dbb      	ldrb	r3, [r7, #22]
 800249a:	2b04      	cmp	r3, #4
 800249c:	d002      	beq.n	80024a4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800249e:	2302      	movs	r3, #2
 80024a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024a2:	e070      	b.n	8002586 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024ba:	e064      	b.n	8002586 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d003      	beq.n	80024d0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2205      	movs	r2, #5
 80024cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	887a      	ldrh	r2, [r7, #2]
 80024e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	887a      	ldrh	r2, [r7, #2]
 80024fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002506:	d906      	bls.n	8002516 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4a24      	ldr	r2, [pc, #144]	; (800259c <HAL_SPI_TransmitReceive_IT+0x150>)
 800250c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a23      	ldr	r2, [pc, #140]	; (80025a0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002512:	651a      	str	r2, [r3, #80]	; 0x50
 8002514:	e005      	b.n	8002522 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_SPI_TransmitReceive_IT+0x158>)
 800251a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8002520:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800252a:	d802      	bhi.n	8002532 <HAL_SPI_TransmitReceive_IT+0xe6>
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d908      	bls.n	8002544 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	e007      	b.n	8002554 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002552:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002562:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d008      	beq.n	8002584 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e000      	b.n	8002586 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8002584:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	08002927 	.word	0x08002927
 80025a0:	0800298d 	.word	0x0800298d
 80025a4:	080027d7 	.word	0x080027d7
 80025a8:	08002895 	.word	0x08002895

080025ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10f      	bne.n	80025f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d004      	beq.n	80025f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
    return;
 80025ee:	e0d8      	b.n	80027a2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_SPI_IRQHandler+0x66>
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	09db      	lsrs	r3, r3, #7
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
    return;
 8002610:	e0c7      	b.n	80027a2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_SPI_IRQHandler+0x8c>
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80b5 	beq.w	80027a2 <HAL_SPI_IRQHandler+0x1f6>
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80ae 	beq.w	80027a2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d023      	beq.n	800269a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b03      	cmp	r3, #3
 800265c:	d011      	beq.n	8002682 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	e00b      	b.n	800269a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
        return;
 8002698:	e083      	b.n	80027a2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d014      	beq.n	80026d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e0:	f043 0208 	orr.w	r2, r3, #8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d050      	beq.n	80027a0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800270c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <HAL_SPI_IRQHandler+0x17e>
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d034      	beq.n	8002794 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0203 	bic.w	r2, r2, #3
 8002738:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	2b00      	cmp	r3, #0
 8002740:	d011      	beq.n	8002766 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <HAL_SPI_IRQHandler+0x1fc>)
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fb95 	bl	8000e7e <HAL_DMA_Abort_IT>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <HAL_SPI_IRQHandler+0x1fc>)
 8002774:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fb7f 	bl	8000e7e <HAL_DMA_Abort_IT>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002792:	e003      	b.n	800279c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7fd feb9 	bl	800050c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800279a:	e000      	b.n	800279e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800279c:	bf00      	nop
    return;
 800279e:	bf00      	nop
 80027a0:	bf00      	nop
  }
}
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	080027ad 	.word	0x080027ad

080027ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7fd fe9f 	bl	800050c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d923      	bls.n	8002832 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	b292      	uxth	r2, r2
 80027f6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	1c9a      	adds	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b02      	subs	r3, #2
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d11f      	bne.n	8002860 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	e016      	b.n	8002860 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f103 020c 	add.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10f      	bne.n	800288c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800287a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa0c 	bl	8002ca4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d912      	bls.n	80028cc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b02      	subs	r3, #2
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028ca:	e012      	b.n	80028f2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	7812      	ldrb	r2, [r2, #0]
 80028d8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d110      	bne.n	800291e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800290a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f9c3 	bl	8002ca4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	b292      	uxth	r2, r2
 800293a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10f      	bne.n	8002984 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002972:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f990 	bl	8002ca4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	1c9a      	adds	r2, r3, #2
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d110      	bne.n	80029e4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f960 	bl	8002ca4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029fc:	f7fe f922 	bl	8000c44 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a0c:	f7fe f91a 	bl	8000c44 <HAL_GetTick>
 8002a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a12:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	015b      	lsls	r3, r3, #5
 8002a18:	0d1b      	lsrs	r3, r3, #20
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a22:	e054      	b.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2a:	d050      	beq.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a2c:	f7fe f90a 	bl	8000c44 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d902      	bls.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d13d      	bne.n	8002abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5a:	d111      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a64:	d004      	beq.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6e:	d107      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a88:	d10f      	bne.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e017      	b.n	8002aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d19b      	bne.n	8002a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000004 	.word	0x20000004

08002afc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b0a:	f7fe f89b 	bl	8000c44 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b1a:	f7fe f893 	bl	8000c44 <HAL_GetTick>
 8002b1e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b20:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00da      	lsls	r2, r3, #3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	0d1b      	lsrs	r3, r3, #20
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b38:	e05f      	b.n	8002bfa <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b40:	d106      	bne.n	8002b50 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b56:	d050      	beq.n	8002bfa <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b58:	f7fe f874 	bl	8000c44 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d902      	bls.n	8002b6e <SPI_WaitFifoStateUntilTimeout+0x72>
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d13d      	bne.n	8002bea <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b86:	d111      	bne.n	8002bac <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b90:	d004      	beq.n	8002b9c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d107      	bne.n	8002bac <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb4:	d10f      	bne.n	8002bd6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e010      	b.n	8002c0c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d197      	bne.n	8002b3a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000004 	.word	0x20000004

08002c18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f7ff ff63 	bl	8002afc <SPI_WaitFifoStateUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e027      	b.n	8002c9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2200      	movs	r2, #0
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff fec8 	bl	80029ec <SPI_WaitFlagStateUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e014      	b.n	8002c9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff ff3c 	bl	8002afc <SPI_WaitFifoStateUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e000      	b.n	8002c9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cac:	f7fd ffca 	bl	8000c44 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0220 	bic.w	r2, r2, #32
 8002cc0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	2164      	movs	r1, #100	; 0x64
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ffa6 	bl	8002c18 <SPI_EndRxTxTransaction>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd6:	f043 0220 	orr.w	r2, r3, #32
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d115      	bne.n	8002d12 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d107      	bne.n	8002d02 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fbe6 	bl	80004cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002d00:	e00e      	b.n	8002d20 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fbee 	bl	80004ec <HAL_SPI_TxRxCpltCallback>
}
 8002d10:	e006      	b.n	8002d20 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fbf6 	bl	800050c <HAL_SPI_ErrorCallback>
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e040      	b.n	8002dbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fd fe22 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f82c 	bl	8002dc4 <UART_SetConfig>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e022      	b.n	8002dbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa56 	bl	8003230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002da2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fadd 	bl	8003374 <UART_CheckIdleState>
 8002dba:	4603      	mov	r3, r0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002dc8:	b088      	sub	sp, #32
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4baa      	ldr	r3, [pc, #680]	; (800309c <UART_SetConfig+0x2d8>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	69f9      	ldr	r1, [r7, #28]
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4aa0      	ldr	r2, [pc, #640]	; (80030a0 <UART_SetConfig+0x2dc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a97      	ldr	r2, [pc, #604]	; (80030a4 <UART_SetConfig+0x2e0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d121      	bne.n	8002e90 <UART_SetConfig+0xcc>
 8002e4c:	4b96      	ldr	r3, [pc, #600]	; (80030a8 <UART_SetConfig+0x2e4>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d816      	bhi.n	8002e88 <UART_SetConfig+0xc4>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <UART_SetConfig+0x9c>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e7d 	.word	0x08002e7d
 8002e68:	08002e77 	.word	0x08002e77
 8002e6c:	08002e83 	.word	0x08002e83
 8002e70:	2301      	movs	r3, #1
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e098      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e76:	2302      	movs	r3, #2
 8002e78:	76fb      	strb	r3, [r7, #27]
 8002e7a:	e095      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	76fb      	strb	r3, [r7, #27]
 8002e80:	e092      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e82:	2308      	movs	r3, #8
 8002e84:	76fb      	strb	r3, [r7, #27]
 8002e86:	e08f      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	76fb      	strb	r3, [r7, #27]
 8002e8c:	bf00      	nop
 8002e8e:	e08b      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a85      	ldr	r2, [pc, #532]	; (80030ac <UART_SetConfig+0x2e8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d134      	bne.n	8002f04 <UART_SetConfig+0x140>
 8002e9a:	4b83      	ldr	r3, [pc, #524]	; (80030a8 <UART_SetConfig+0x2e4>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d829      	bhi.n	8002efc <UART_SetConfig+0x138>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <UART_SetConfig+0xec>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002efd 	.word	0x08002efd
 8002eb8:	08002efd 	.word	0x08002efd
 8002ebc:	08002efd 	.word	0x08002efd
 8002ec0:	08002ef1 	.word	0x08002ef1
 8002ec4:	08002efd 	.word	0x08002efd
 8002ec8:	08002efd 	.word	0x08002efd
 8002ecc:	08002efd 	.word	0x08002efd
 8002ed0:	08002eeb 	.word	0x08002eeb
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002efd 	.word	0x08002efd
 8002edc:	08002efd 	.word	0x08002efd
 8002ee0:	08002ef7 	.word	0x08002ef7
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	76fb      	strb	r3, [r7, #27]
 8002ee8:	e05e      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002eea:	2302      	movs	r3, #2
 8002eec:	76fb      	strb	r3, [r7, #27]
 8002eee:	e05b      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	76fb      	strb	r3, [r7, #27]
 8002ef4:	e058      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	76fb      	strb	r3, [r7, #27]
 8002efa:	e055      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002efc:	2310      	movs	r3, #16
 8002efe:	76fb      	strb	r3, [r7, #27]
 8002f00:	bf00      	nop
 8002f02:	e051      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a69      	ldr	r2, [pc, #420]	; (80030b0 <UART_SetConfig+0x2ec>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d120      	bne.n	8002f50 <UART_SetConfig+0x18c>
 8002f0e:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <UART_SetConfig+0x2e4>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d00f      	beq.n	8002f3c <UART_SetConfig+0x178>
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	d802      	bhi.n	8002f26 <UART_SetConfig+0x162>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <UART_SetConfig+0x16c>
 8002f24:	e010      	b.n	8002f48 <UART_SetConfig+0x184>
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d005      	beq.n	8002f36 <UART_SetConfig+0x172>
 8002f2a:	2b30      	cmp	r3, #48	; 0x30
 8002f2c:	d009      	beq.n	8002f42 <UART_SetConfig+0x17e>
 8002f2e:	e00b      	b.n	8002f48 <UART_SetConfig+0x184>
 8002f30:	2300      	movs	r3, #0
 8002f32:	76fb      	strb	r3, [r7, #27]
 8002f34:	e038      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f36:	2302      	movs	r3, #2
 8002f38:	76fb      	strb	r3, [r7, #27]
 8002f3a:	e035      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	76fb      	strb	r3, [r7, #27]
 8002f40:	e032      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f42:	2308      	movs	r3, #8
 8002f44:	76fb      	strb	r3, [r7, #27]
 8002f46:	e02f      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	76fb      	strb	r3, [r7, #27]
 8002f4c:	bf00      	nop
 8002f4e:	e02b      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <UART_SetConfig+0x2dc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d124      	bne.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f5a:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <UART_SetConfig+0x2e4>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d012      	beq.n	8002f90 <UART_SetConfig+0x1cc>
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	d802      	bhi.n	8002f76 <UART_SetConfig+0x1b2>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <UART_SetConfig+0x1c0>
 8002f74:	e012      	b.n	8002f9c <UART_SetConfig+0x1d8>
 8002f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7a:	d006      	beq.n	8002f8a <UART_SetConfig+0x1c6>
 8002f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f80:	d009      	beq.n	8002f96 <UART_SetConfig+0x1d2>
 8002f82:	e00b      	b.n	8002f9c <UART_SetConfig+0x1d8>
 8002f84:	2300      	movs	r3, #0
 8002f86:	76fb      	strb	r3, [r7, #27]
 8002f88:	e00e      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	76fb      	strb	r3, [r7, #27]
 8002f8e:	e00b      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f90:	2304      	movs	r3, #4
 8002f92:	76fb      	strb	r3, [r7, #27]
 8002f94:	e008      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f96:	2308      	movs	r3, #8
 8002f98:	76fb      	strb	r3, [r7, #27]
 8002f9a:	e005      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	76fb      	strb	r3, [r7, #27]
 8002fa0:	bf00      	nop
 8002fa2:	e001      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <UART_SetConfig+0x2dc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	f040 8082 	bne.w	80030b8 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fb4:	7efb      	ldrb	r3, [r7, #27]
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d823      	bhi.n	8003002 <UART_SetConfig+0x23e>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <UART_SetConfig+0x1fc>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fe5 	.word	0x08002fe5
 8002fc4:	08003003 	.word	0x08003003
 8002fc8:	08002fed 	.word	0x08002fed
 8002fcc:	08003003 	.word	0x08003003
 8002fd0:	08002ff3 	.word	0x08002ff3
 8002fd4:	08003003 	.word	0x08003003
 8002fd8:	08003003 	.word	0x08003003
 8002fdc:	08003003 	.word	0x08003003
 8002fe0:	08002ffb 	.word	0x08002ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe4:	f7fe ff7c 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 8002fe8:	6178      	str	r0, [r7, #20]
        break;
 8002fea:	e00f      	b.n	800300c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <UART_SetConfig+0x2f0>)
 8002fee:	617b      	str	r3, [r7, #20]
        break;
 8002ff0:	e00c      	b.n	800300c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe fedf 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8002ff6:	6178      	str	r0, [r7, #20]
        break;
 8002ff8:	e008      	b.n	800300c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	617b      	str	r3, [r7, #20]
        break;
 8003000:	e004      	b.n	800300c <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	76bb      	strb	r3, [r7, #26]
        break;
 800300a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8100 	beq.w	8003214 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d305      	bcc.n	8003030 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	d902      	bls.n	8003036 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	76bb      	strb	r3, [r7, #26]
 8003034:	e0ee      	b.n	8003214 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	4619      	mov	r1, r3
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	0214      	lsls	r4, r2, #8
 8003048:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800304c:	020b      	lsls	r3, r1, #8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6852      	ldr	r2, [r2, #4]
 8003052:	0852      	lsrs	r2, r2, #1
 8003054:	4611      	mov	r1, r2
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	eb13 0b01 	adds.w	fp, r3, r1
 800305e:	eb44 0c02 	adc.w	ip, r4, r2
 8003062:	4658      	mov	r0, fp
 8003064:	4661      	mov	r1, ip
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f04f 0400 	mov.w	r4, #0
 800306e:	461a      	mov	r2, r3
 8003070:	4623      	mov	r3, r4
 8003072:	f7fd f8ab 	bl	80001cc <__aeabi_uldivmod>
 8003076:	4603      	mov	r3, r0
 8003078:	460c      	mov	r4, r1
 800307a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003082:	d308      	bcc.n	8003096 <UART_SetConfig+0x2d2>
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800308a:	d204      	bcs.n	8003096 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	e0be      	b.n	8003214 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	76bb      	strb	r3, [r7, #26]
 800309a:	e0bb      	b.n	8003214 <UART_SetConfig+0x450>
 800309c:	efff69f3 	.word	0xefff69f3
 80030a0:	40008000 	.word	0x40008000
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40004800 	.word	0x40004800
 80030b4:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c0:	d15c      	bne.n	800317c <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80030c2:	7efb      	ldrb	r3, [r7, #27]
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d828      	bhi.n	800311a <UART_SetConfig+0x356>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <UART_SetConfig+0x30c>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030f5 	.word	0x080030f5
 80030d4:	080030fd 	.word	0x080030fd
 80030d8:	08003105 	.word	0x08003105
 80030dc:	0800311b 	.word	0x0800311b
 80030e0:	0800310b 	.word	0x0800310b
 80030e4:	0800311b 	.word	0x0800311b
 80030e8:	0800311b 	.word	0x0800311b
 80030ec:	0800311b 	.word	0x0800311b
 80030f0:	08003113 	.word	0x08003113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7fe fef4 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 80030f8:	6178      	str	r0, [r7, #20]
        break;
 80030fa:	e013      	b.n	8003124 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030fc:	f7fe ff06 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 8003100:	6178      	str	r0, [r7, #20]
        break;
 8003102:	e00f      	b.n	8003124 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003104:	4b49      	ldr	r3, [pc, #292]	; (800322c <UART_SetConfig+0x468>)
 8003106:	617b      	str	r3, [r7, #20]
        break;
 8003108:	e00c      	b.n	8003124 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800310a:	f7fe fe53 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 800310e:	6178      	str	r0, [r7, #20]
        break;
 8003110:	e008      	b.n	8003124 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003116:	617b      	str	r3, [r7, #20]
        break;
 8003118:	e004      	b.n	8003124 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	76bb      	strb	r3, [r7, #26]
        break;
 8003122:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d074      	beq.n	8003214 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005a      	lsls	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	fbb2 f3f3 	udiv	r3, r2, r3
 800313e:	b29b      	uxth	r3, r3
 8003140:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d916      	bls.n	8003176 <UART_SetConfig+0x3b2>
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314e:	d212      	bcs.n	8003176 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f023 030f 	bic.w	r3, r3, #15
 8003158:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	b29a      	uxth	r2, r3
 8003166:	89fb      	ldrh	r3, [r7, #14]
 8003168:	4313      	orrs	r3, r2
 800316a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	89fa      	ldrh	r2, [r7, #14]
 8003172:	60da      	str	r2, [r3, #12]
 8003174:	e04e      	b.n	8003214 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	76bb      	strb	r3, [r7, #26]
 800317a:	e04b      	b.n	8003214 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 800317c:	7efb      	ldrb	r3, [r7, #27]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d827      	bhi.n	80031d2 <UART_SetConfig+0x40e>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0x3c4>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031b5 	.word	0x080031b5
 8003190:	080031bd 	.word	0x080031bd
 8003194:	080031d3 	.word	0x080031d3
 8003198:	080031c3 	.word	0x080031c3
 800319c:	080031d3 	.word	0x080031d3
 80031a0:	080031d3 	.word	0x080031d3
 80031a4:	080031d3 	.word	0x080031d3
 80031a8:	080031cb 	.word	0x080031cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ac:	f7fe fe98 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 80031b0:	6178      	str	r0, [r7, #20]
        break;
 80031b2:	e013      	b.n	80031dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b4:	f7fe feaa 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e00f      	b.n	80031dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <UART_SetConfig+0x468>)
 80031be:	617b      	str	r3, [r7, #20]
        break;
 80031c0:	e00c      	b.n	80031dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c2:	f7fe fdf7 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 80031c6:	6178      	str	r0, [r7, #20]
        break;
 80031c8:	e008      	b.n	80031dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ce:	617b      	str	r3, [r7, #20]
        break;
 80031d0:	e004      	b.n	80031dc <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	76bb      	strb	r3, [r7, #26]
        break;
 80031da:	bf00      	nop
    }

    if (pclk != 0U)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d018      	beq.n	8003214 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	085a      	lsrs	r2, r3, #1
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	441a      	add	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d908      	bls.n	8003210 <UART_SetConfig+0x44c>
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003204:	d204      	bcs.n	8003210 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	e001      	b.n	8003214 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003220:	7ebb      	ldrb	r3, [r7, #26]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800322c:	00f42400 	.word	0x00f42400

08003230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01a      	beq.n	8003346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332e:	d10a      	bne.n	8003346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003382:	f7fd fc5f 	bl	8000c44 <HAL_GetTick>
 8003386:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b08      	cmp	r3, #8
 8003394:	d10e      	bne.n	80033b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003396:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f82a 	bl	80033fe <UART_WaitOnFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e020      	b.n	80033f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d10e      	bne.n	80033e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f814 	bl	80033fe <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e00a      	b.n	80033f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	4613      	mov	r3, r2
 800340c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800340e:	e05d      	b.n	80034cc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003416:	d059      	beq.n	80034cc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003418:	f7fd fc14 	bl	8000c44 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	429a      	cmp	r2, r3
 8003426:	d302      	bcc.n	800342e <UART_WaitOnFlagUntilTimeout+0x30>
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11b      	bne.n	8003466 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800343c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e042      	b.n	80034ec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d02b      	beq.n	80034cc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003482:	d123      	bne.n	80034cc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800348c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800349c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e00f      	b.n	80034ec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	429a      	cmp	r2, r3
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d092      	beq.n	8003410 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <__libc_init_array>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	4e0d      	ldr	r6, [pc, #52]	; (800352c <__libc_init_array+0x38>)
 80034f8:	4c0d      	ldr	r4, [pc, #52]	; (8003530 <__libc_init_array+0x3c>)
 80034fa:	1ba4      	subs	r4, r4, r6
 80034fc:	10a4      	asrs	r4, r4, #2
 80034fe:	2500      	movs	r5, #0
 8003500:	42a5      	cmp	r5, r4
 8003502:	d109      	bne.n	8003518 <__libc_init_array+0x24>
 8003504:	4e0b      	ldr	r6, [pc, #44]	; (8003534 <__libc_init_array+0x40>)
 8003506:	4c0c      	ldr	r4, [pc, #48]	; (8003538 <__libc_init_array+0x44>)
 8003508:	f000 f820 	bl	800354c <_init>
 800350c:	1ba4      	subs	r4, r4, r6
 800350e:	10a4      	asrs	r4, r4, #2
 8003510:	2500      	movs	r5, #0
 8003512:	42a5      	cmp	r5, r4
 8003514:	d105      	bne.n	8003522 <__libc_init_array+0x2e>
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800351c:	4798      	blx	r3
 800351e:	3501      	adds	r5, #1
 8003520:	e7ee      	b.n	8003500 <__libc_init_array+0xc>
 8003522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003526:	4798      	blx	r3
 8003528:	3501      	adds	r5, #1
 800352a:	e7f2      	b.n	8003512 <__libc_init_array+0x1e>
 800352c:	080035b4 	.word	0x080035b4
 8003530:	080035b4 	.word	0x080035b4
 8003534:	080035b4 	.word	0x080035b4
 8003538:	080035b8 	.word	0x080035b8

0800353c <memset>:
 800353c:	4402      	add	r2, r0
 800353e:	4603      	mov	r3, r0
 8003540:	4293      	cmp	r3, r2
 8003542:	d100      	bne.n	8003546 <memset+0xa>
 8003544:	4770      	bx	lr
 8003546:	f803 1b01 	strb.w	r1, [r3], #1
 800354a:	e7f9      	b.n	8003540 <memset+0x4>

0800354c <_init>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr

08003558 <_fini>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr
